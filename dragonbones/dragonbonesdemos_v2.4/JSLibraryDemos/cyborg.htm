<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>demo</title>
    <script src="js/jquery.js"></script>
    <script src="js/createjs.js"></script>
    <script src="js/dragonBones.js"></script>
    <script src="js/dragonBonesCreateJS.js"></script>
</head>
<body onLoad="init();">
    <div id="canvasHolder">
        <canvas id="canvas" width="800" height="600"></canvas>
    </div>
	
	<script type='text/javascript'>
		function init()
		{
			createJSInit();
		}
		
		var canvas;
		var stage;
		
		var texture;
		var textureData;
		var skeletonData;
		
		function createJSInit()
		{
			canvas = document.getElementById("canvas");
			stage = new createjs.Stage(canvas);
			
			texture = new Image();
			texture.onload = function()
			{
				$.getJSON(
					"assets/cyborg/texture.json",
					function(data)
					{
						textureData = data;
						$.getJSON(
							"assets/cyborg/skeleton.json",
							function(data)
							{
								skeletonData = data;
								dragonBonesInit();
							}
						)
					}
				);
			}
			texture.src = "assets/cyborg/texture.png";
		}
		
		var factory;
		var armature;
		
		function dragonBonesInit()
		{
			factory = new dragonBones.factorys.CreateJSFactory();
			factory.addSkeletonData(dragonBones.objects.DataParser.parseSkeletonData(skeletonData));
			factory.addTextureAtlas(new dragonBones.textures.CreateJSTextureAtlas(texture, textureData));
			
			armature = factory.buildArmature("cyborg");
			armature.getDisplay().x = 400;
			armature.getDisplay().y = 400;
			updateAnimation();
			
			_body = armature.getBone("body");
			_chest = armature.getBone("chest");
			_head = armature.getBone("head");
			_armR = armature.getBone("upperarmR");
			_armL = armature.getBone("upperarmL");
			_weapon = armature.getBone("weapon");
			
			dragonBones.animation.WorldClock.clock.add(armature);
			
			stage.addChild(armature.getDisplay());
			createjs.Ticker.setFPS(60);
			createjs.Ticker.addEventListener("tick", update);
			
			document.onkeydown = keyHandler;
			document.onkeyup = keyHandler;
			canvas.onmousemove = mouseMoveHandler;
		}
		
		function update() 
		{
			updateSpeed();
			updateWeapon();
			dragonBones.animation.WorldClock.clock.advanceTime(1/60);
			stage.update();
		}
		
		var _body;
		var _chest;
		var _head;
		var _armR;
		var _armL;
		var _weapon;

		var _left = false;
		var _right = false;

		var _isJumping = false;
		var _isSquat = false;
		var _mouseX = 0;
		var _mouseY = 0;
		var _moveDir = 0;
		var _face = 1;
		var _weaponID = -1;
		var _speedX = 0;
		var _speedY = 0;
		
		function mouseMoveHandler(e)
		{
			_mouseX = e.layerX;
			_mouseY = e.layerY;
		}
		
		function keyHandler(e)
		{
			e = e || window.event;
			var currKey = e.keyCode || e.which || e.charCode;
			var isDown = e.type == "keydown";
			switch (currKey) 
			{
				case 37 :
				case 65 :
					_left = isDown;
					updateMove(-1);
					break;
				case 39 :
				case 68 :
					_right = isDown;
					updateMove(1);
					break;
				case 38 :
				case 87 :
					if(isDown) 
					{
						jump();
					}
					break;
				case 83 :
				case 40 :
					squat(isDown);
					break;
				case 32 :
					if(!isDown) 
					{
						changeWeapon();
					}
					break;
			}
		}
		
		function updateMove(dir)
		{
			if (_left && _right) 
			{
				move(dir);
			}
			else if (_left)
			{
				move(-1);
			}
			else if (_right)
			{
				move(1);
			}
			else 
			{
				move(0);
			}
		}
	
		function move(dir)
		{
			if (_moveDir == dir) 
			{
				return;
			}
			_moveDir = dir;
			updateAnimation();
		}

		function jump() 
		{
			if(_isJumping) 
			{
				return;
			}
			_speedY = -15;
			_isJumping = true;
			armature.animation.gotoAndPlay("jump");
		}

		function squat(isSquat)
		{
			if(_isSquat == isSquat) 
			{
				return;
			}
			_isSquat = isSquat;
			updateAnimation();
		}

		function changeWeapon() 
		{
			_weaponID ++;
			if(_weaponID >= 4) 
			{
				_weaponID -= 4;
			}
			
			var animationName = "weapon" + (_weaponID + 1);
			
			_weapon.displayController = animationName;
			//Animation Mixing
			armature.animation.gotoAndPlay(animationName, -1, -1, NaN, 0, "weaponGroup", "sameGroup");
		}

		function updateAnimation() 
		{
			if(_isJumping) 
			{
				return;
			}
			
			if(_isSquat) 
			{
				_speedX = 0;
				armature.animation.gotoAndPlay("squat");
				return;
			}

			if(_moveDir == 0) 
			{
				_speedX = 0;
				armature.animation.gotoAndPlay("stand");
			}
			else 
			{
				if(_moveDir * _face > 0) 
				{
					_speedX = 4* _face;
					armature.animation.gotoAndPlay("run");
				}
				else 
				{
					_speedX = -3 * _face;
					armature.animation.gotoAndPlay("runBack");
				}
			}
		}
		
		function updateSpeed() 
		{
			if(_isJumping) 
			{
				if(_speedY <= 0 && _speedY + 0.5 > 0 ) 
				{
					armature.animation.gotoAndPlay("fall");
				}
				_speedY += 0.5;
			}
			if(_speedX != 0) 
			{
				armature.getDisplay().x += _speedX;
				if(armature.getDisplay().x < 0) 
				{
					armature.getDisplay().x = 0;
				}
				else if(armature.getDisplay().x > 800) 
				{
					armature.getDisplay().x = 800;
				}
			}
			if(_speedY != 0) 
			{
				armature.getDisplay().y += _speedY;
				if(armature.getDisplay().y > 400) 
				{
					armature.getDisplay().y = 400;
					_isJumping = false;
					_speedY = 0;
					_speedX = 0;
					armature.addEventListener(dragonBones.events.AnimationEvent.FADE_OUT_COMPLETE, animationFadeOutCompleteHandler);
					armature.animation.gotoAndPlay("fallEnd");
				}
			}
		}

		function animationFadeOutCompleteHandler(e)
		{
			switch(e.animationState.name)
			{
				case "fallEnd":
					armature.removeEventListener(dragonBones.events.AnimationEvent.FADE_OUT_COMPLETE, animationFadeOutCompleteHandler);
					updateAnimation();
					break;
			}
		}
		
		function updateWeapon() 
		{
			_face = _mouseX > armature.getDisplay().x?1: -1;
			if(armature.getDisplay().scaleX * _face < 0)
			{
				armature.getDisplay().scaleX *= -1;
				updateAnimation();
			}

			var r;
			if(_face > 0)
			{
				r = Math.atan2(_mouseY - armature.getDisplay().y, _mouseX - armature.getDisplay().x);
			}
			else
			{
				r = Math.PI - Math.atan2(_mouseY - armature.getDisplay().y, _mouseX - armature.getDisplay().x);
				if(r > Math.PI) 
				{
					r -= Math.PI * 2;
				}
			}
			
			_body.offset.setRotation(r * 0.25);
			_chest.offset.setRotation(r * 0.25);
			if(r > 0) 
			{
				_head.offset.setRotation(r * 0.2);
			}
			else
			{
				_head.offset.setRotation(r * 0.4);
			}

			_armR.offset.setRotation(r * 0.5);
			if(r > 0) 
			{
				_armL.offset.setRotation(r * 0.8);
			}
			else
			{
				_armL.offset.setRotation(r * 0.6);
			}
		}
	</script>
</body>
</html>